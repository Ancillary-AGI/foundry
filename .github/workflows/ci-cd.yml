name: Foundry IDE CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false

jobs:
  # Build and Test Engine Core (C++)
  engine-core-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            cmake_flags: -DCMAKE_BUILD_TYPE=Release
          - os: windows-latest
            cmake_flags: -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 16 2019"
          - os: macos-latest
            cmake_flags: -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up CMake
      uses: lukka/get-cmake@latest

    - name: Set up Ninja (Linux/macOS)
      if: runner.os != 'Windows'
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake ${{ matrix.cmake_flags }} ..

    - name: Build Engine Core
      run: |
        cd build
        cmake --build . --config Release --parallel

    - name: Run Engine Core Tests
      run: |
        cd build
        ctest --output-on-failure --build-config Release

    - name: Upload Engine Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: engine-test-results-${{ matrix.os }}
        path: build/Testing/

  # Build and Test IDE (Kotlin)
  ide-build:
    runs-on: ubuntu-latest
    needs: engine-core-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ide/gradlew

    - name: Build IDE
      run: |
        cd ide
        ./gradlew build --no-daemon --parallel

    - name: Run IDE Tests
      run: |
        cd ide
        ./gradlew test --no-daemon --parallel

    - name: Run IDE Integration Tests
      run: |
        cd ide
        ./gradlew integrationTest --no-daemon

    - name: Generate Test Reports
      run: |
        cd ide
        ./gradlew jacocoTestReport

    - name: Upload IDE Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ide-test-results
        path: |
          ide/build/reports/
          ide/build/test-results/

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ide/build/reports/jacoco/test/jacocoTestReport.xml
        flags: ide
        name: IDE Coverage

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [engine-core-build, ide-build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Run Performance Benchmarks
      run: |
        cd ide
        ./gradlew performanceTest --no-daemon

    - name: Run Load Tests
      run: |
        cd ide
        ./gradlew loadTest --no-daemon

    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: ide/build/reports/performance/

  # Security Testing
  security-test:
    runs-on: ubuntu-latest
    needs: ide-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Security Scan
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: ./...

    - name: Run Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Foundry IDE'
        path: '.'
        format: 'ALL'

    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Plugin System Testing
  plugin-test:
    runs-on: ubuntu-latest
    needs: ide-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build Test Plugins
      run: |
        cd ide
        ./gradlew buildTestPlugins --no-daemon

    - name: Run Plugin System Tests
      run: |
        cd ide
        ./gradlew pluginTest --no-daemon

    - name: Test Plugin Marketplace
      run: |
        cd ide
        ./gradlew marketplaceTest --no-daemon

    - name: Upload Plugin Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: plugin-test-results
        path: ide/build/plugin-test-reports/

  # MCP and Agent System Testing
  mcp-agent-test:
    runs-on: ubuntu-latest
    needs: ide-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Run MCP Server Tests
      run: |
        cd ide
        ./gradlew mcpTest --no-daemon

    - name: Run Agent System Tests
      run: |
        cd ide
        ./gradlew agentTest --no-daemon

    - name: Run Stateful Agent Tests
      run: |
        cd ide
        ./gradlew statefulAgentTest --no-daemon

    - name: Test Agent Communication
      run: |
        cd ide
        ./gradlew agentCommunicationTest --no-daemon

    - name: Upload MCP/Agent Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mcp-agent-test-results
        path: ide/build/mcp-agent-test-reports/

  # Cross-Platform Testing
  cross-platform-test:
    runs-on: ${{ matrix.os }}
    needs: [engine-core-build, ide-build]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Run Cross-Platform Tests
      run: |
        cd ide
        ./gradlew crossPlatformTest --no-daemon -Dtest.platform=${{ matrix.os }}

    - name: Upload Cross-Platform Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cross-platform-results-${{ matrix.os }}
        path: ide/build/cross-platform-reports/

  # Integration Testing
  integration-test:
    runs-on: ubuntu-latest
    needs: [engine-core-build, ide-build, plugin-test, mcp-agent-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Run Full System Integration Tests
      run: |
        cd ide
        ./gradlew integrationTest --no-daemon

    - name: Run End-to-End Tests
      run: |
        cd ide
        ./gradlew e2eTest --no-daemon

    - name: Run UI Integration Tests
      run: |
        cd ide
        ./gradlew uiTest --no-daemon

    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: ide/build/integration-test-reports/

  # Build Artifacts
  build-artifacts:
    runs-on: ${{ matrix.os }}
    needs: [engine-core-build, ide-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build Release Artifacts
      run: |
        cd ide
        ./gradlew buildRelease --no-daemon

    - name: Create Release Archive
      run: |
        cd ide/build
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          tar -czf foundry-ide-linux.tar.gz release/
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          7z a foundry-ide-windows.zip release/
        else
          tar -czf foundry-ide-macos.tar.gz release/
        fi

    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: foundry-ide-${{ matrix.os }}
        path: ide/build/foundry-ide-*.tar.gz

  # Deploy to Package Registry
  deploy:
    runs-on: ubuntu-latest
    needs: [build-artifacts, integration-test, performance-test, security-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: foundry-ide-ubuntu-latest
        path: artifacts/

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Publish to GitHub Packages
      run: |
        cd ide
        ./gradlew publish --no-daemon
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Foundry IDE v${{ github.run_number }}
        body: |
          ## Foundry IDE Release v${{ github.run_number }}

          ### Changes
          - See commit history for detailed changes

          ### Downloads
          - Linux: [foundry-ide-linux.tar.gz](artifacts/foundry-ide-linux.tar.gz)
          - Windows: [foundry-ide-windows.zip](artifacts/foundry-ide-windows.zip)
          - macOS: [foundry-ide-macos.tar.gz](artifacts/foundry-ide-macos.tar.gz)

          ### Installation
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Run the executable

          ### Requirements
          - Java 17 or higher
          - For C++ development: CMake 3.15+, appropriate compiler toolchain
        draft: false
        prerelease: false

  # Quality Gate
  quality-gate:
    runs-on: ubuntu-latest
    needs: [engine-core-build, ide-build, performance-test, security-test, integration-test]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Quality Gate Check
      run: |
        # Check if all required jobs passed
        if [ "${{ needs.engine-core-build.result }}" != "success" ]; then
          echo "Engine core build failed"
          exit 1
        fi

        if [ "${{ needs.ide-build.result }}" != "success" ]; then
          echo "IDE build failed"
          exit 1
        fi

        if [ "${{ needs.performance-test.result }}" != "failure" ]; then
          echo "Performance tests did not run or failed"
          exit 1
        fi

        if [ "${{ needs.security-test.result }}" != "success" ]; then
          echo "Security tests failed"
          exit 1
        fi

        if [ "${{ needs.integration-test.result }}" != "success" ]; then
          echo "Integration tests failed"
          exit 1
        fi

        echo "All quality gates passed!"

    - name: Notify Quality Gate Status
      if: failure()
      run: |
        echo "Quality gate failed - check individual job results"
        # Could integrate with Slack, Discord, etc. for notifications

  # Documentation
  docs:
    runs-on: ubuntu-latest
    needs: ide-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate Documentation
      run: |
        cd ide
        ./gradlew dokkaHtml --no-daemon

    - name: Deploy Documentation
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ide/build/dokka/html
        destination_dir: docs/api

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Cleanup Artifacts
      run: |
        # Clean up old artifacts, logs, etc.
        echo "Cleanup completed"